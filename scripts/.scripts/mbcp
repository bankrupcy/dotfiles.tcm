#!/usr/bin/env python3

import sys
import os
from rich import *
import subprocess as sp

pwd = os.getcwd() + "/"

args = sys.argv

validHelperCommands = ["help", "examples"]
validCommands = ["git", "stress"]
problemWebsites = ["Usaco", "Usaco-Training", "Kattis", "UVa", "CSES"]
# EDIT THIS TO CHANGE GIT DIRECTORY --------------------------------------------
gitDirectory = "/Users/tcmb139/programming/cp/Competitive-Programming/"


def help():
    print("Valid Helper Commands\n")

    for command in validHelperCommands:
        print("\t", command)

    print("\nValid Commands\n")

    for command in validCommands:
        print("\t", command)

    print()


def examples():
    def validOptions():
        print("Valid Examples Options\n")
        print("\tgit")
        print("\tstress")
        print()

    def git():
        print()
        print("Usaco:                mbcp git Usaco a.cpp 2015-2016 US-Open G 1")
        print("Usaco-Traning:        mbcp git Usaco-Training a.cpp 1 namenum")
        print("Kattis:               mbcp git Kattis a.cpp kutevi")
        print("UVa:                  ")
        print("CSES:                 ")
        print()

    def stress():
        print()
        print("mbcp stress gen_file wrong_file correct_file")
        print()

    if len(args) >= 3:
        if args[2] == "git":
            git()
        elif args[2] == "stress":
            stress()
        else:
            print("Failed to find example for " + args[2])
    else:
        validOptions()


def git():
    if len(args) < 5:
        raise Exception

    website = args[2]
    sourceFile = args[3]

    if website in problemWebsites:
        fileExtensionIndex = sourceFile.rfind(".")
        if fileExtensionIndex == -1:
            print("Failed to find file extension.")
            return

        fileExtension = sourceFile[fileExtensionIndex:]

        if website == "Usaco":
            year = args[4]
            month = args[5]
            division = args[6]
            problemNumber = args[7]

            possibleYears = [
                "2011-2012",
                "2012-2013",
                "2013-2014",
                "2014-2015",
                "2015-2016",
                "2016-2017",
                "2017-2018",
                "2018-2019",
                "2019-2020",
                "2020-2021",
                "2021-2022",
                "2022-2023",
                "2023-2024",
            ]

            possibleMonths = ["December", "January", "February", "US-Open"]
            possibleMonthsEarly = [
                "November",
                "December",
                "January",
                "February",
                "March",
                "US-Open",
            ]

            possibleDivisons = ["B", "S", "G", "P"]
            possibleDivisonsEarly = ["B", "S", "G"]
            possibleProblemNumbers = ["1", "2", "3"]

            if not (year in possibleYears):
                print("Failed to find a valid year.")
                return

            if (not (month in possibleMonths) and int(year[3]) >= 4) and (
                not (month in possibleMonthsEarly) and int(year[3]) < 4
            ):
                print("Failed to find a valid month.")
                return

            if (not (division in possibleDivisons) and int(year[3]) >= 5) and (
                not (month in possibleDivisonsEarly) and int(year[3]) < 5
            ):
                print("Failed to find a valid division.")
                return

            if not (problemNumber in possibleProblemNumbers):
                print("Failed to find a valid problem number.")
                return

            if division == "B":
                division = "Bronze"
            elif division == "S":
                division = "Silver"
            elif division == "G":
                division = "Gold"
            else:
                division = "Platinum"

            fullPath = gitDirectory + website + "/" + year

            if not os.path.isdir(fullPath):
                sp.run(["mkdir", fullPath])

            fullPath += "/" + month

            if not os.path.isdir(fullPath):
                sp.run(["mkdir", fullPath])

            fullPath += "/" + division + "P" + problemNumber + fileExtension

            copy = True
            if os.path.isfile(fullPath):
                copy = False
                print(
                    "Would you like to overwrite the file at " + fullPath + " \[y/N]: ",
                    end="",
                )
                response = input()
                if response == "y" or response == "Y":
                    copy = True

            if copy:
                sp.run("cp " + pwd + sourceFile + " " + fullPath, shell=True)

        elif website == "Usaco-Training":
            print("This hasn't been implemented. :/")
        elif website == "Kattis":
            problemName = args[4]

            sp.run(
                [
                    "cp",
                    pwd + sourceFile,
                    gitDirectory + website + "/" + problemName + fileExtension,
                ]
            )

        elif website == "UVa":
            print("This hasn't been implemented. :/")
        elif website == "CSES":
            print("This hasn't been implemented. :/")

    else:
        print(args[2], "is not a valid problem website")


def stress():
    if len(args) < 5:
        raise Exception

    genFile = pwd + args[2]
    wrongFile = pwd + args[3]
    correctFile = pwd + args[4]

    intFile = pwd + "int"
    out1File = pwd + "out1"
    out2File = pwd + "out2"

    i = 0
    while True:
        print("Test: " + str(i), end="\r")

        genRun = genFile + " " + str(i)
        wrongRun = wrongFile + " < " + intFile
        correctRun = correctFile + " < " + intFile
        diffRun = "diff -w " + out1File + " " + out2File

        # genFile run
        genOut = sp.run(genRun, capture_output=True, text=True, shell=True)

        if genOut.stderr:
            print("Error has occured while generating input.")
            break

        genOutFile = open(intFile, "w")

        genOutFile.write(genOut.stdout)

        genOutFile.close()

        # wrongFile run
        wrongOut = sp.run(wrongRun, capture_output=True, text=True, shell=True)

        if wrongOut.stderr:
            print("Error has occured while running " + args[3])
            break

        wrongOutFile = open(out1File, "w")

        wrongOutFile.write(wrongOut.stdout)

        wrongOutFile.close()

        # correctFile run
        correctOut = sp.run(correctRun, capture_output=True, text=True, shell=True)

        if correctOut.stderr:
            print("Error has occured while running " + args[4])
            break

        correctOutFile = open(out2File, "w")

        correctOutFile.write(correctOut.stdout)

        correctOutFile.close()

        # compare difference
        diffOut = sp.run(diffRun, capture_output=True, text=True, shell=True)

        if diffOut.stderr:
            print("Error has occured while comparing outputs.")
            break

        if diffOut.stdout:
            print("Test case:", i)
            print("--------- Input ---------")
            print(genOut.stdout)
            print("--------- Outputs ---------")
            print(wrongOut.stdout)
            print("------")
            print(correctOut.stdout)

            return

        i += 1


def main():
    if len(args) == 1:
        help()
        return

    if args[1] == "help":
        help()
    elif args[1] == "examples":
        examples()
    elif args[1] == "git":
        git()
    elif args[1] == "stress":
        stress()
    else:
        print("Failed to find valid command.")
        print("mbcp help")


if __name__ == "__main__":
    try:
        main()
    except SystemExit:
        pass
    except Exception:
        print("Please check examples.")
        print("mbcp examples [", end="")
        for i in range(len(validCommands)):
            print(validCommands[i] + "", end="")
            if i == len(validCommands) - 1:
                print("]")
            else:
                print(", ", end="")
    except:
        print("[red]An internal error occured. OH NO![/red]")
